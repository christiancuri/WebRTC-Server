let express,http,socketIo;_329‍.w("express",[["default",["express"],function(v){express=v}]]);_329‍.w("http",[["default",["http"],function(v){http=v}]]);_329‍.w("socket.io",[["default",["socketIo"],function(v){socketIo=v}]]);



const app = express();

const server = http.createServer(app);
const PORT = 5000

let broadcaster;

const io = socketIo(server)

io.sockets.on('connection', socket => {
  socket.on('broadcaster', () => {
    broadcaster = socket.id
    socket.broadcast.emit('broadcaster')
  })

  socket.on('watcher', () => {
    broadcaster && socket.to(broadcaster).emit('watcher', socket.id)
  })

  socket.on('offer', (id, message) => { //Watcher
    socket.to(id).emit('offer', socket.id, message) // Broadcaster
  })

  socket.on('answer', (id, message) => { // Broadcaster
    socket.to(id).emit('answer', socket.id, message) //Watcher
  })

  socket.on('candidate', (id, message) => {
    socket.to(id).emit('candidate', socket.id, message)
  })

  socket.on('disconnect', () => {
    broadcaster && socket.to(broadcaster).emit('bye', socket.id);
  })
})

io.sockets.on('error', e => _329‍.g.console.log(e));

server.listen(PORT, () => console.log(`Server is running on port ${port}`));